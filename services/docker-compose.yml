services:
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: salesdb
    command: ["postgres", "-c", "wal_level=logical", "-c", "max_replication_slots=4", "-c", "max_wal_senders=4"]
    ports:
      - "5432:5432"
    volumes:
      - ./database/sql-scripts:/docker-entrypoint-initdb.d:rw
      

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  debezium:
    image: debezium/connect:2.7.3.Final
    container_name: debezium
    restart: always
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_configs
      OFFSET_STORAGE_TOPIC: debezium_offsets
      STATUS_STORAGE_TOPIC: debezium_status
      KAFKA_MAX_REQUEST_SIZE: 200000000
      KAFKA_MESSAGE_MAX_BYTES: 200000000
    ports:
      - "8083:8083"
    depends_on:
      - kafka

  app:
    image: python:3.9
    container_name: app
    depends_on:
      - postgres
      - debezium
      - kafka
    volumes:
      - ..:/app
    working_dir: /app
    command: >
      sh -c "pip install -r requirements.txt &&
              curl -X POST -H 'Content-Type: application/json' --data @/app/configs/debezium_connector.json http://debezium:8083/connectors &&
              sleep 3 &&
              python kafka/kafka_consumer.py &&
              echo 'App is running!'"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/salesdb

